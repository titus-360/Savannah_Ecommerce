# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: savannah_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Add these settings to ensure PostgreSQL is ready
        env:
          PGDATA: /var/lib/postgresql/data
          POSTGRES_HOST_AUTH_METHOD: trust

    env:
      DB_NAME: savannah_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      DJANGO_SETTINGS_MODULE: savannah_ecommerce.ci_settings
      DEBUG: False

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Static Directory
      run: |
        mkdir -p static

    - name: Wait for PostgreSQL
      run: |
        timeout 20s bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done;'

    - name: Run Migrations
      run: |
        python manage.py migrate

    - name: Run Tests
      run: |
        coverage run --source='.' manage.py test

    - name: Generate Coverage Report
      run: |
        coverage report -m

    - name: Run Flake8 Linting
      run: flake8 .

    - name: Run Black Formatter Check
      run: black --check .

    - name: Run Pip-Audit Security Scan
      run: pip-audit

    - name: Run Bandit Static Analysis
      run: bandit -r . 
