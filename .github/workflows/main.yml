# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Add permissions block
permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: savannah_db
        ports:
          - 5432:5432
        # Add these settings to ensure PostgreSQL is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PYTHONPATH: ${{ github.workspace }}
      DJANGO_SETTINGS_MODULE: savannah_ecommerce.ci_settings
      DEBUG: False
      DB_NAME: savannah_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install -r requirements.txt
        pip install psycopg2-binary
        pip install drf-yasg

    - name: Create Static Directory
      run: |
        mkdir -p static

    - name: Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            break
          fi
          if [ $i -eq 30 ]; then
            echo "PostgreSQL did not become ready in time"
            exit 1
          fi
          sleep 1
        done

    - name: Run Migrations
      run: |
        python manage.py migrate

    - name: Run Tests
      run: |
        coverage run --source='.' manage.py test

    - name: Generate Coverage Report
      run: |
        coverage report -m

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/savannah-ecommerce:${{ env.IMAGE_TAG }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up minikube
      uses: medyagh/setup-minikube@master

    - name: Deploy to Kubernetes
      run: |
        # Create namespace first
        kubectl create namespace savannah --dry-run=client -o yaml | kubectl apply -f -
        
        # Wait for namespace to be ready
        kubectl wait --for=condition=ready namespace/savannah --timeout=30s || true
        
        # Create secrets after namespace exists
        kubectl create secret docker-registry ghcr-auth \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --namespace=savannah \
          --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl create secret generic db-secrets \
          --namespace savannah \
          --from-literal=password=postgres \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Debug: Show environment variables
        echo "DOCKER_REGISTRY: $DOCKER_REGISTRY"
        echo "IMAGE_TAG: $IMAGE_TAG"
        
        # Create a temporary file with substituted values
        export DEPLOYMENT_FILE=$(mktemp)
        envsubst < k8s/deployment.yaml > $DEPLOYMENT_FILE
        
        # Debug: Show the processed deployment file
        echo "Processed deployment file:"
        cat $DEPLOYMENT_FILE
        
        # Apply the processed deployment file with explicit namespace
        kubectl apply -f $DEPLOYMENT_FILE -n savannah
        kubectl apply -f k8s/service.yaml -n savannah
        
        # Debug: Show all resources in the namespace
        echo "Resources in savannah namespace:"
        kubectl get all -n savannah
        
        # Wait for deployment to be ready
        echo "Waiting for deployment to be ready..."
        kubectl wait --namespace savannah \
          --for=condition=available \
          --timeout=300s \
          deployment/savannah-ecommerce || true
        
        # Show detailed deployment status
        echo "Deployment status:"
        kubectl describe deployment savannah-ecommerce -n savannah
        
        # Show pod status and logs
        echo "Pod status:"
        kubectl get pods -n savannah
        POD_NAME=$(kubectl get pods -n savannah -l app=savannah-ecommerce -o jsonpath="{.items[0].metadata.name}")
        if [ ! -z "$POD_NAME" ]; then
          echo "Pod logs:"
          kubectl logs -n savannah $POD_NAME
          echo "Pod description:"
          kubectl describe pod -n savannah $POD_NAME
        else
          echo "No pods found for the deployment"
        fi

        # Show minikube status
        echo "Minikube status:"
        minikube status

    - name: Get Service URL
      run: |
        echo "Getting service URL..."
        # Wait for pods to be ready
        echo "Waiting for pods to be ready..."
        kubectl wait --namespace savannah \
          --for=condition=ready \
          --timeout=300s \
          pod -l app=savannah-ecommerce || true
        
        # Get service URL
        minikube service savannah-ecommerce -n savannah --url
        echo "To access the application, run: minikube service savannah-ecommerce -n savannah"
